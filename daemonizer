#!/usr/bin/perl

=pod
    daemonizer is an application lifecycle management framework. It starts and stops application and
    displays information about them. A typical use case is when you have a program that you
    would like to run as a UNIX daemon being able to check its logs and stop when needed (a web
    server or a microservice are good examples). Please refer to the Readme.md for further info.
=cut

use strict;
use warnings;

use Data::Dumper;
use File::Basename qw(dirname);

sub init_env_vars {
    # Setting up daemonizer variables
    my $BASE_DIR = dirname $0;
    $ENV{DAEMONIZER_BASE_DIR} = $BASE_DIR;
    $ENV{DAEMONIZER_PIDFILE_DIR}    = "$BASE_DIR/pidfiles";
    $ENV{DAEMONIZER_LOGFILE_DIR}    = "$BASE_DIR/logs";
    $ENV{DAEMONIZER_APPSCRIPTS_DIR} = "$BASE_DIR/startup-scripts";

    mkdir $ENV{DAEMONIZER_PIDFILE_DIR} unless -e $ENV{DAEMONIZER_PIDFILE_DIR};
    mkdir $ENV{DAEMONIZER_LOGFILE_DIR} unless -e $ENV{DAEMONIZER_LOGFILE_DIR};
    mkdir $ENV{DAEMONIZER_APPSCRIPTS_DIR} unless -e $ENV{DAEMONIZER_APPSCRIPTS_DIR};
}

my $mode = 'background';
my ($app, $cmd) = @ARGV;
my @commands = qw(start forcestart stop show showlog);
my @core_commands = qw(help showscripts showpidfiles);
local $" = '|';

init_env_vars();

my $err_msg = "No app(s) specified! Valid format: 'daemonizer <app> <commands>'.\n";
$err_msg .= "Example: daemonizer sleeper start\n";
$err_msg .= "If in doubt, try 'daemonizer core help' for further information";

die $err_msg unless $app;
unless ($cmd) {
    if ($app eq 'core') {
        die "No command specified! Valid commands: @core_commands";
    } else {
        my $err_msg = "No command specified for the app '$app'! Valid universal commands: @commands\n";
        $err_msg   .= "You can also try 'daemonizer $app listcommands' to get an app-specific list of commands\n";
        die $err_msg;
    }
}

my $runner_cmd = "runner '$app $cmd' $mode";
exec($runner_cmd) or die "Cannot exec $runner_cmd!";
